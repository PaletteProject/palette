// Prisma schema file

// Specifies the datasource to use
datasource db {
  provider = "postgresql" // Use postgres
  url      = env("DATABASE_URL") // connection string stored in local .env file
}

generator client {
  provider = "prisma-client-js"
}

model Rubric {
  id                        Int               @id @default(autoincrement())
  title                     String            @db.VarChar(255)
  contextId                 Int?
  contextType               String?
  pointsPossible            Int               @default(0)
  reusable                  Boolean?
  readOnly                  Boolean?
  freeFormCriterionComments Boolean?
  hideScoreTotal            Boolean?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @default(now()) @updatedAt
  content                   String?
  published                 Boolean           @default(false)
  authorId                  Int?
  rubricCriteria            RubricCriterion[]

  @@unique([title, authorId]) // make sure each author doesn't have duplicate rubric titles
}

model RubricCriterion {
  id                Int            @id @default(autoincrement())
  description       String         @db.VarChar(255)
  longDescription   String?        @db.VarChar(510)
  points            Int            @default(0)
  criterionUseRange Int?
  ratings           RubricRating[]
  rubric            Rubric         @relation(fields: [rubricId], references: [id], onDelete: Cascade)
  rubricId          Int
  tempateId         Int
}

model RubricRating {
  id                Int             @id @default(autoincrement())
  description       String          @db.VarChar(255)
  longDescription   String?         @db.VarChar(510)
  points            Int             @default(0)
  criterionUseRange Int?
  criterion         RubricCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId       Int
}

model RubricAssessment {
  id                  Int    @id @default(autoincrement())
  rubricId            Int
  rubricAssociationId Int
  score               Int
  artifactType        String
  artifactId          Int
  artifactAttempt     Int
  assessmentType      String
  assessorId          Int
}

model RubricAssociation {
  id                 Int     @id @default(autoincrement())
  rubricId           Int
  associationId      Int
  associationType    String
  useForGrading      Boolean
  summaryData        String
  purpose            String
  hideScoreTotal     Boolean
  hidePoints         Boolean
  hideOutcomeResults Boolean
}


